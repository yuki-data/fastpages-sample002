
var documents = [{
    "id": 0,
    "url": "https://yuki-data.github.io/404.html",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "https://yuki-data.github.io/about/",
    "title": "自己紹介",
    "body": "未経験からのエンジニア転職を目指して勉強中。よろしくお願いします。 "
    }, {
    "id": 2,
    "url": "https://yuki-data.github.io/categories/",
    "title": "Tags",
    "body": "Contents: {% if site. categories. size &gt; 0 %} {% for category in site. categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }}{% endfor %}{% endif %} {% for category in site. categories %}  {% capture category_name %}{{ category | first }}{% endcapture %} &lt;h3 id = {{ category_name }} &gt;&lt;i class= fas fa-tags category-tags-icon &gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt;&lt;a name= {{ category_name | slugize }} &gt;&lt;/a&gt;{% for post in site. categories[category_name] %}{%- assign date_format = site. minima. date_format | default:  %b %-d, %Y  -%}&lt;article class= archive-item &gt; &lt;p class= post-meta post-meta-title &gt;&lt;a class= page-meta  href= {{ site. baseurl }}{{ post. url }} &gt;{{post. title}}&lt;/a&gt; • {{ post. date | date: date_format }}&lt;/p&gt;&lt;/article&gt;{% endfor %} {% endfor %}"
    }, {
    "id": 3,
    "url": "https://yuki-data.github.io/images/copied_from_nb/",
    "title": "",
    "body": "WarningDo not manually save images into this folder. This is used by GitHub Actions to automatically copy images.  Any images you save into this folder could be deleted at build time. "
    }, {
    "id": 4,
    "url": "https://yuki-data.github.io/pandas/data%20analysis/2020/02/27/pandas-groupby-tutorial.html",
    "title": "Apply Operations To Groups In Pandas",
    "body": "2020/02/27 -           &#21442;&#32771;&#12395;&#12375;&#12383;&#12469;&#12452;&#12488;&#182;: GroupBy-fu: improvements in grouping and aggregating data in pandas - Wes McKinneyWorking with DataFramesApply Functions By Group In Pandas - PythonChris Albon - Data Science, Machine Learning, and Artificial IntelligencePandas . groupby(), Lambda Functions, &amp; Pivot TablesSummarising, Aggregating, and Grouping data in Python Pandas | Shane Lynnpandas&#12391;&#21021;&#26399;&#12487;&#12540;&#12479;&#12434;&#29992;&#24847;&#182;:       import pandas as pdimport numpy as npimport matplotlib. pyplot as plt%matplotlib inline          # Create dataframeraw_data = {&#39;regiment&#39;: [&#39;Nighthawks&#39;, &#39;Nighthawks&#39;, &#39;Nighthawks&#39;, &#39;Nighthawks&#39;, &#39;Dragoons&#39;, &#39;Dragoons&#39;, &#39;Dragoons&#39;, &#39;Dragoons&#39;, &#39;Scouts&#39;, &#39;Scouts&#39;, &#39;Scouts&#39;, &#39;Scouts&#39;],    &#39;company&#39;: [&#39;1st&#39;, &#39;1st&#39;, &#39;2nd&#39;, &#39;2nd&#39;, &#39;1st&#39;, &#39;1st&#39;, &#39;2nd&#39;, &#39;2nd&#39;,&#39;1st&#39;, &#39;1st&#39;, &#39;2nd&#39;, &#39;2nd&#39;],    &#39;name&#39;: [&#39;Miller&#39;, &#39;Jacobson&#39;, &#39;Ali&#39;, &#39;Milner&#39;, &#39;Cooze&#39;, &#39;Jacon&#39;, &#39;Ryaner&#39;, &#39;Sone&#39;, &#39;Sloan&#39;, &#39;Piger&#39;, &#39;Riani&#39;, &#39;Ali&#39;],    &#39;preTestScore&#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],    &#39;postTestScore&#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]}df = pd. DataFrame(raw_data, columns = [&#39;regiment&#39;, &#39;company&#39;, &#39;name&#39;, &#39;preTestScore&#39;, &#39;postTestScore&#39;])df           regiment   company   name   preTestScore   postTestScore         0   Nighthawks   1st   Miller   4   25       1   Nighthawks   1st   Jacobson   24   94       2   Nighthawks   2nd   Ali   31   57       3   Nighthawks   2nd   Milner   2   62       4   Dragoons   1st   Cooze   3   70       5   Dragoons   1st   Jacon   4   25       6   Dragoons   2nd   Ryaner   24   94       7   Dragoons   2nd   Sone   31   57       8   Scouts   1st   Sloan   2   62       9   Scouts   1st   Piger   3   70       10   Scouts   2nd   Riani   2   62       11   Scouts   2nd   Ali   3   70     groupby&#12398;&#20351;&#12356;&#26041;&#182;:       # Create a groupby variable that groups preTestScores by regimentgroupby_regiment = df[&#39;preTestScore&#39;]. groupby(df[&#39;company&#39;])groupby_regiment  &lt;pandas. core. groupby. SeriesGroupBy object at 0x0000000008FA0A58&gt;  groups&#12399;&#12289;&#12464;&#12523;&#12540;&#12503;&#12434;&#20316;&#12427;&#12392;&#12365;&#12398;&#12452;&#12531;&#12487;&#12483;&#12463;&#12473;&#12398;&#20998;&#39006;&#12394;&#12398;&#12391;&#12289;df&#20840;&#20307;&#12391;&#20966;&#29702;&#12375;&#12390;&#12418;&#21516;&#12376;&#182;:       groupby_regiment. groups  {&#39;1st&#39;: Int64Index([0, 1, 4, 5, 8, 9], dtype=&#39;int64&#39;), &#39;2nd&#39;: Int64Index([2, 3, 6, 7, 10, 11], dtype=&#39;int64&#39;)}        df. groupby(df[&#39;company&#39;]). groups  {&#39;1st&#39;: Int64Index([0, 1, 4, 5, 8, 9], dtype=&#39;int64&#39;), &#39;2nd&#39;: Int64Index([2, 3, 6, 7, 10, 11], dtype=&#39;int64&#39;)}        groupby_regiment. get_group(&quot;1st&quot;)  0   41  244   35   48   29   3Name: preTestScore, dtype: int64  &#20855;&#20307;&#30340;&#12395;&#35201;&#32032;&#12434;&#30906;&#35469;&#12377;&#12427;&#12395;&#12399;list&#182;: gbの内容を視覚的に確認できる       list(groupby_regiment)  [(&#39;1st&#39;, 0   4 1  24 4   3 5   4 8   2 9   3 Name: preTestScore, dtype: int64), (&#39;2nd&#39;, 2   31 3   2 6   24 7   31 10   2 11   3 Name: preTestScore, dtype: int64)]        groupby_regiment. describe()  company    1st   count   6. 000000     mean   6. 666667     std    8. 524475     min    2. 000000     25%    3. 000000     50%    3. 500000     75%    4. 000000     max   24. 0000002nd   count   6. 000000     mean   15. 500000     std   14. 652645     min    2. 000000     25%    2. 250000     50%   13. 500000     75%   29. 250000     max   31. 000000Name: preTestScore, dtype: float64        groupby_regiment. mean()  company1st   6. 6666672nd  15. 500000Name: preTestScore, dtype: float64  groupby&#12391;&#35079;&#25968;&#12398;&#12459;&#12521;&#12512;&#12434;&#35373;&#23450;&#12377;&#12427;&#12392;&#12289;&#12510;&#12523;&#12481;&#12452;&#12531;&#12487;&#12483;&#12463;&#12473;&#12395;&#12394;&#12427;&#182;:       df[&#39;preTestScore&#39;]. groupby([df[&#39;regiment&#39;], df[&#39;company&#39;]]). mean()  regiment  companyDragoons  1st     3. 5      2nd    27. 5Nighthawks 1st    14. 0      2nd    16. 5Scouts   1st     2. 5      2nd     2. 5Name: preTestScore, dtype: float64        df[&#39;preTestScore&#39;]. groupby([df[&#39;regiment&#39;], df[&#39;company&#39;]]). groups  {(&#39;Dragoons&#39;, &#39;1st&#39;): Int64Index([4, 5], dtype=&#39;int64&#39;), (&#39;Dragoons&#39;, &#39;2nd&#39;): Int64Index([6, 7], dtype=&#39;int64&#39;), (&#39;Nighthawks&#39;, &#39;1st&#39;): Int64Index([0, 1], dtype=&#39;int64&#39;), (&#39;Nighthawks&#39;, &#39;2nd&#39;): Int64Index([2, 3], dtype=&#39;int64&#39;), (&#39;Scouts&#39;, &#39;1st&#39;): Int64Index([8, 9], dtype=&#39;int64&#39;), (&#39;Scouts&#39;, &#39;2nd&#39;): Int64Index([10, 11], dtype=&#39;int64&#39;)}  df['preTestScore']のようにカラム指定からgroupbyするなら、groupby(arg)のargは、インデックスをわたす必要がある。カラム名は無効       try:  df[&#39;preTestScore&#39;]. groupby([&#39;regiment&#39;,&#39;company&#39;]). groupsexcept KeyError:  print(&quot;エラー&quot;)  エラー        df. groupby([&#39;regiment&#39;,&#39;company&#39;]). groups  {(&#39;Dragoons&#39;, &#39;1st&#39;): Int64Index([4, 5], dtype=&#39;int64&#39;), (&#39;Dragoons&#39;, &#39;2nd&#39;): Int64Index([6, 7], dtype=&#39;int64&#39;), (&#39;Nighthawks&#39;, &#39;1st&#39;): Int64Index([0, 1], dtype=&#39;int64&#39;), (&#39;Nighthawks&#39;, &#39;2nd&#39;): Int64Index([2, 3], dtype=&#39;int64&#39;), (&#39;Scouts&#39;, &#39;1st&#39;): Int64Index([8, 9], dtype=&#39;int64&#39;), (&#39;Scouts&#39;, &#39;2nd&#39;): Int64Index([10, 11], dtype=&#39;int64&#39;)}        df. groupby([&#39;regiment&#39;,&#39;company&#39;]). mean()              preTestScore   postTestScore       regiment   company               Dragoons   1st   3. 5   47. 5       2nd   27. 5   75. 5       Nighthawks   1st   14. 0   59. 5       2nd   16. 5   59. 5       Scouts   1st   2. 5   66. 0       2nd   2. 5   66. 0           df. groupby([&#39;regiment&#39;,&#39;company&#39;]). mean(). unstack()           preTestScore   postTestScore       company   1st   2nd   1st   2nd       regiment                     Dragoons   3. 5   27. 5   47. 5   75. 5       Nighthawks   14. 0   16. 5   59. 5   59. 5       Scouts   2. 5   2. 5   66. 0   66. 0           df. groupby([&#39;regiment&#39;, &#39;company&#39;]). size()  regiment  companyDragoons  1st    2      2nd    2Nighthawks 1st    2      2nd    2Scouts   1st    2      2nd    2dtype: int64  &#12452;&#12486;&#12524;&#12540;&#12479;&#12434;&#20351;&#12387;&#12390;&#12289;gb&#12398;&#20869;&#23481;&#12434;&#21487;&#35222;&#21270;&#182;:       for name, group in df. groupby(&#39;regiment&#39;):  # print the name of the regiment  print(name)  # print the data of that regiment  print(group)  Dragoons  regiment company  name preTestScore postTestScore4 Dragoons   1st  Cooze       3       705 Dragoons   1st  Jacon       4       256 Dragoons   2nd Ryaner      24       947 Dragoons   2nd  Sone      31       57Nighthawks   regiment company   name preTestScore postTestScore0 Nighthawks   1st  Miller       4       251 Nighthawks   1st Jacobson      24       942 Nighthawks   2nd    Ali      31       573 Nighthawks   2nd  Milner       2       62Scouts  regiment company  name preTestScore postTestScore8  Scouts   1st Sloan       2       629  Scouts   1st Piger       3       7010  Scouts   2nd Riani       2       6211  Scouts   2nd  Ali       3       70        df. groupby(&#39;regiment&#39;). mean()           preTestScore   postTestScore       regiment               Dragoons   15. 50   61. 5       Nighthawks   15. 25   59. 5       Scouts   2. 50   66. 0           df. groupby([&#39;regiment&#39;, &#39;company&#39;]). mean(). add_prefix(&#39;mean_&#39;). unstack()           mean_preTestScore   mean_postTestScore       company   1st   2nd   1st   2nd       regiment                     Dragoons   3. 5   27. 5   47. 5   75. 5       Nighthawks   14. 0   16. 5   59. 5   59. 5       Scouts   2. 5   2. 5   66. 0   66. 0     gb. apply(f(x))&#182;: gb. apply(f(x))を使う。f(x)のxには、gbの要素のdfが代入される。       df[&#39;postTestScore&#39;]. groupby(df[&#39;regiment&#39;]). apply(lambda sdf: sdf. mean())  regimentDragoons   61. 5Nighthawks  59. 5Scouts    66. 0Name: postTestScore, dtype: float64        def get_stats(group):  return {&#39;min&#39;: group. min(), &#39;max&#39;: group. max(), &#39;count&#39;: group. count(), &#39;mean&#39;: group. mean()}          df[&#39;postTestScore&#39;]. groupby(df[&#39;regiment&#39;]). apply(get_stats)  regiment     Dragoons  count   4. 0      max   94. 0      mean   61. 5      min   25. 0Nighthawks count   4. 0      max   94. 0      mean   59. 5      min   25. 0Scouts   count   4. 0      max   70. 0      mean   66. 0      min   62. 0Name: postTestScore, dtype: float64        df[&#39;postTestScore&#39;]. groupby(df[&#39;regiment&#39;]). apply(get_stats). unstack()           count   max   mean   min       regiment                     Dragoons   4. 0   94. 0   61. 5   25. 0       Nighthawks   4. 0   94. 0   59. 5   25. 0       Scouts   4. 0   70. 0   66. 0   62. 0     "
    }, {
    "id": 5,
    "url": "https://yuki-data.github.io/jupyter/2020/02/20/test.html",
    "title": "Fastpages Notebook Blog Post",
    "body": "2020/02/20 -           About&#182;This notebook is a demonstration of some of capabilities of fastpages with notebooks. With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! Front Matter&#182;: Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: Setting toc: true will automatically generate a table of contentsSetting badges: true will automatically include GitHub and Google Colab links to your notebook. Setting comments: true will enable commenting on your blog post, powered by utterances. More details and options for front matter can be viewed on the front matter section of the README. Markdown Shortcuts&#182;: A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. A #hide_input comment at the top of any code cell will only hide the input of that cell.     The comment #hide_input was used to hide the code that produced this.   put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:              #collapse-hideimport pandas as pdimport altair as alt       put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:              #collapse-showcars = &#39;https://vega. github. io/vega-datasets/data/cars. json&#39;movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;sp500 = &#39;https://vega. github. io/vega-datasets/data/sp500. csv&#39;stocks = &#39;https://vega. github. io/vega-datasets/data/stocks. csv&#39;flights = &#39;https://vega. github. io/vega-datasets/data/flights-5k. json&#39;       Interactive Charts With Altair&#182;: Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook. Example 1: DropDown&#182;:       # single-value selection over [Major_Genre, MPAA_Rating] pairs# use specific hard-wired values as the initial selected valuesselection = alt. selection_single(  name=&#39;Select&#39;,  fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],  init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},  bind={&#39;Major_Genre&#39;: alt. binding_select(options=genres), &#39;MPAA_Rating&#39;: alt. binding_radio(options=mpaa)}) # scatter plot, modify opacity based on selectionalt. Chart(movies). mark_circle(). add_selection(  selection). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=&#39;IMDB_Rating:Q&#39;,  tooltip=&#39;Title:N&#39;,  opacity=alt. condition(selection, alt. value(0. 75), alt. value(0. 05)))    Example 2: Tooltips&#182;:       alt. Chart(movies). mark_circle(). add_selection(  alt. selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=alt. Y(&#39;IMDB_Rating:Q&#39;, axis=alt. Axis(minExtent=30)), # use min extent to stabilize axis title placement  tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]). properties(  width=600,  height=400)    Example 3: More Tooltips&#182;:       # select a point for which to provide details-on-demandlabel = alt. selection_single(  encodings=[&#39;x&#39;], # limit selection to x-axis value  on=&#39;mouseover&#39;, # select on mouseover events  nearest=True,  # select data point nearest the cursor  empty=&#39;none&#39;   # empty selection includes no data points)# define our base line chart of stock pricesbase = alt. Chart(). mark_line(). encode(  alt. X(&#39;date:T&#39;),  alt. Y(&#39;price:Q&#39;, scale=alt. Scale(type=&#39;log&#39;)),  alt. Color(&#39;symbol:N&#39;))alt. layer(  base, # base line chart    # add a rule mark to serve as a guide line  alt. Chart(). mark_rule(color=&#39;#aaa&#39;). encode(    x=&#39;date:T&#39;  ). transform_filter(label),    # add circle marks for selected time points, hide unselected points  base. mark_circle(). encode(    opacity=alt. condition(label, alt. value(1), alt. value(0))  ). add_selection(label),  # add white stroked text to provide a legible background for labels  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),  # add text labels for stock prices  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),    data=stocks). properties(  width=700,  height=400)    Data Tables&#182;: You can display tables per the usual way in your blog:       movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;df = pd. read_json(movies)# display table with pandasdf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;,   &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]]. head()           Title   Worldwide_Gross   Production_Budget   IMDB_Rating         0   The Land Girls   146083. 0   8000000. 0   6. 1       1   First Love, Last Rites   10876. 0   300000. 0   6. 9       2   I Married a Strange Person   203134. 0   250000. 0   6. 8       3   Let's Talk About Sex   373615. 0   300000. 0   NaN       4   Slam   1087521. 0   1000000. 0   3. 4     Images&#182;: Local Images&#182;: You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax: ![](my_icons/fastai_logo. png) Remote Images&#182;: Remote images can be included with the following markdown syntax: ![](https://image. flaticon. com/icons/svg/36/36686. svg) Animated Gifs&#182;: Animated Gifs work, too! ![](https://upload. wikimedia. org/wikipedia/commons/7/71/ChessPawnSpecialMoves. gif) Captions&#182;: You can include captions with markdown images like this: ![](https://www. fast. ai/images/fastai_paper/show_batch. png  Credit: https://www. fast. ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ ) Other Elements&#182;Tweetcards&#182;: Typing &gt; twitter: https://twitter. com/jakevdp/status/1204765621767901185?s=20 will render this:  Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Youtube Videos&#182;: Typing &gt; youtube: https://youtu. be/XfoYk_Z5AkI will render this:   Boxes / Callouts&#182;: Typing &gt; Warning: There will be no second warning! will render this:    Warning: There will be no second warning! Typing &gt; Important: Pay attention! It's important. will render this:    Important: Pay attention! It&#8217;s important. Typing &gt; Tip: This is my tip. will render this:    Tip: This is my tip. Typing &gt; Note: Take note of this. will render this:    Note: Take note of this. Typing &gt; Note: A doc link to [an example website: fast. ai](https://www. fast. ai/) should also work fine. will render in the docs:    Note: A doc link to an example website: fast. ai should also work fine. Footnotes&#182;: You can have footnotes in notebooks just like you can with markdown. For example, here is a footnote 1. This is the footnote. &#8617; "
    }, {
    "id": 6,
    "url": "https://yuki-data.github.io/markdown/2020/01/14/test-markdown-post.html",
    "title": "Example Markdown Post",
    "body": "2020/01/14 - Basic setup: Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-filename. md Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. . md is the file extension for markdown files. The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. Basic formatting: You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: Lists: Here’s a list:  item 1 item 2And a numbered list:  item 1 item 2Boxes and stuff:  This is a quotation    You can include alert boxes…and…    You can include info boxesImages: Code: You can format text and code per usual General preformatted text: # Do a thingdo_thing()Python code and output: # Prints '2'print(1+1)2Formatting text as shell commands: echo  hello world . /some_script. sh --option  value wget https://example. com/cat_photo1. pngFormatting text as YAML: key: value- another_key:  another value Tables:       Column 1   Column 2         A thing   Another thing   Tweetcards: Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019Footnotes:       This is the footnote.  &#8617;    "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')
    this.metadataWhitelist = ['position']

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}